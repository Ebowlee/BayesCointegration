
【面向对象引用理解总结 - QuantConnect多模块结构中的self指向与跨模块访问】

一、背景说明：
用户在QuantConnect框架中使用多个模块（UniverseSelection、AlphaModel 等）构建量化策略，遇到“AlphaModel访问UniverseSelection中定义的cointegrated_pairs失败”的问题，涉及self作用域与对象传递问题。

二、问题本质：
QuantConnect的SetUniverseSelection只接受接口IUniverseSelectionModel（只要求实现SelectCoarse和SelectFine）。
它不会自动保存你传入的对象的完整引用，也不会暴露你自定义的属性如cointegrated_pairs。

三、常见误区：
错误尝试：
    algorithm.UniverseSelection.cointegrated_pairs
失败原因：algorithm.UniverseSelection是接口类型，不包含自定义属性。

四、正确做法：引用传递
在主类BayesianCointegrationStrategy中：
    self.my_universe_model = MyUniverseSelectionModel(self)
    self.SetUniverseSelection(self.my_universe_model)

在AlphaModel中访问：
    self.algorithm.my_universe_model.cointegrated_pairs

五、面向对象关键点解释：
1）self.my_universe_model 中的 self 是主类BayesianCointegrationStrategy的self
2）cointegrated_pairs 中的 self 是 MyUniverseSelectionModel 的self
3）SetAlpha(CointAlphaModel(self)) 中的两个self都是主类的self
4）在AlphaModel中，self.algorithm.my_universe_model.cointegrated_pairs 中：
    - self 是 AlphaModel 的实例
    - algorithm 是主类的实例
    - my_universe_model 是主类中保存的模型引用

六、总结建议：
- 各模块应只负责自己的功能，尽量通过“显式传引用”的方式共享状态，而非使用全局变量。
- QuantConnect的Set方法（如SetAlpha、SetUniverseSelection）不会保留自定义对象的全部引用，只接收接口方法。
- 为避免模块耦合与调试困难，应明确管理模块间的依赖引用。
